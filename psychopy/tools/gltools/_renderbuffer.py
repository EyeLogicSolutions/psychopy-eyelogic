#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Classes and functions for working with OpenGL renderbuffers.
"""

# Part of the PsychoPy library
# Copyright (C) 2002-2018 Jonathan Peirce (C) 2019-2020 Open Science Tools Ltd.
# Distributed under the terms of the GNU General Public License (GPL).

__all__ = [
    'RenderbufferInfo',
    'createRenderbuffer',
    'deleteRenderbuffer'
]

# ------------------------------
# Renderbuffer Objects Functions
# ------------------------------
#
# The functions below handle the creation and management of Renderbuffers
# Objects.
#

import ctypes
from ._misc import *
import pyglet.gl as GL


class RenderbufferInfo(object):
    """Descriptor representing an OpenGL render buffer object. These objects are
    usually generated by calling `createRenderbuffer`
    """
    __slots__ = [
        'name',
        'target',
        'width',
        'height',
        'internalFormat',
        '_samples',
        '_multiSample',  # boolean, check if a texture is multisample
        'userData']  # dictionary for user defined data

    def __init__(self, name, target, width, height, internalFormat, samples,
                 userData=None):
        self.name = name
        self.target = target  # should be GL_RENDERBUFFER
        self.width = width
        self.height = height
        self.internalFormat = internalFormat
        self._samples = samples
        self._multiSample = self.samples > 1
        self.userData = userData if userData is not None else dict()

    @property
    def size(self):
        """Size of the renderbuffer (w, h)."""
        return (self.width, self.height)

    @property
    def samples(self):
        """Number of samples per-pixels for this buffer."""
        return self._samples

    @property
    def isMultisample(self):
        """`True` if this is a multi-sample renderbuffer."""
        return self._multiSample

    def __del__(self):
        GL.glDeleteRenderbuffers(1, self.name)


def createRenderbuffer(width, height, internalFormat=GL.GL_RGBA8, samples=1):
    """Create a new Renderbuffer Object with a specified internal format. A
    multisample storage buffer is created if samples > 1.

    Renderbuffers contain image data and are optimized for use as render
    targets. See https://www.khronos.org/opengl/wiki/Renderbuffer_Object for
    more information.

    Parameters
    ----------
    width : :obj:`int`
        Buffer width in pixels.
    height : :obj:`int`
        Buffer height in pixels.
    internalFormat : :obj:`int`
        Format for renderbuffer data (e.g. GL_RGBA8, GL_DEPTH24_STENCIL8).
    samples : :obj:`int`
        Number of samples for multi-sampling, should be >1 and power-of-two.
        Work with one sample, but will raise a warning.

    Returns
    -------
    Renderbuffer
        A descriptor of the created renderbuffer.

    Notes
    -----
    The 'userData' field of the returned descriptor is a dictionary that can
    be used to store arbitrary data associated with the buffer.

    """
    width = int(width)
    height = int(height)

    # create a new renderbuffer ID
    rbId = GL.GLuint()
    GL.glGenRenderbuffers(1, ctypes.byref(rbId))
    GL.glBindRenderbuffer(GL.GL_RENDERBUFFER, rbId)

    if samples > 1:
        # determine if the 'samples' value is valid
        maxSamples = getIntegerv(GL.GL_MAX_SAMPLES)
        if (samples & (samples - 1)) != 0:
            raise ValueError('Invalid number of samples, must be power-of-two.')
        elif samples > maxSamples:
            raise ValueError('Invalid number of samples, must be <{}.'.format(
                maxSamples))

        # create a multisample render buffer storage
        GL.glRenderbufferStorageMultisample(
            GL.GL_RENDERBUFFER,
            samples,
            internalFormat,
            width,
            height)

    else:
        GL.glRenderbufferStorage(
            GL.GL_RENDERBUFFER,
            internalFormat,
            width,
            height)

    # done, unbind it
    GL.glBindRenderbuffer(GL.GL_RENDERBUFFER, 0)

    return RenderbufferInfo(rbId,
                            GL.GL_RENDERBUFFER,
                            width,
                            height,
                            internalFormat,
                            samples,
                            dict())


def deleteRenderbuffer(renderBuffer):
    """Free the resources associated with a renderbuffer. This invalidates the
    renderbuffer's ID.

    """
    GL.glDeleteRenderbuffers(1, renderBuffer.name)
    # invalidate in case there are references out there still
    renderBuffer.name = GL.GLuint(0)


if __name__ == "__main__":
    pass
