#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Various string functions for working with strings.
#

# Part of the PsychoPy library
# Copyright (C) 2002-2018 Jonathan Peirce (C) 2019-2020 Open Science Tools Ltd.
# Distributed under the terms of the GNU General Public License (GPL).

import re

__all__ = ["prettyname"]


def prettyname(name):
    """Convert a camelCase, TitleCase or underscore_delineated title to Full Title Case"""
    # Replace _ with space
    name = name.replace("_", " ")
    # Put a space before any capital letter, apart from at the beginning, or already after a space
    name = name[0] + re.sub('(?<![ -.])([A-Z])', r' \1', name[1:])
    # Capitalise first letter of each word
    name = name.title()
    # Treat the word "PsychoPy" as a special case
    name = name.replace("Psycho Py", "PsychoPy")

    return name

unicodeBlocks = {
	'BasicLatin': range(int('0000', 16), int('007F', 16)),
	'Latin-1Supplement': range(int('0080', 16), int('00FF', 16)),
	'LatinExtended-A': range(int('0100', 16), int('017F', 16)),
	'LatinExtended-B': range(int('0180', 16), int('024F', 16)),
	'IPAExtensions': range(int('0250', 16), int('02AF', 16)),
	'SpacingModifierLetters': range(int('02B0', 16), int('02FF', 16)),
	'CombiningDiacriticalMarks': range(int('0300', 16), int('036F', 16)),
	'GreekandCoptic': range(int('0370', 16), int('03FF', 16)),
	'Cyrillic': range(int('0400', 16), int('04FF', 16)),
	'CyrillicSupplement': range(int('0500', 16), int('052F', 16)),
	'Armenian': range(int('0530', 16), int('058F', 16)),
	'Hebrew': range(int('0590', 16), int('05FF', 16)),
	'Arabic': range(int('0600', 16), int('06FF', 16)),
	'Syriac': range(int('0700', 16), int('074F', 16)),
	'ArabicSupplement': range(int('0750', 16), int('077F', 16)),
	'Thaana': range(int('0780', 16), int('07BF', 16)),
	'NKo': range(int('07C0', 16), int('07FF', 16)),
	'Samaritan': range(int('0800', 16), int('083F', 16)),
	'Mandaic': range(int('0840', 16), int('085F', 16)),
	'SyriacSupplement': range(int('0860', 16), int('086F', 16)),
	'ArabicExtended-A': range(int('08A0', 16), int('08FF', 16)),
	'Devanagari': range(int('0900', 16), int('097F', 16)),
	'Bengali': range(int('0980', 16), int('09FF', 16)),
	'Gurmukhi': range(int('0A00', 16), int('0A7F', 16)),
	'Gujarati': range(int('0A80', 16), int('0AFF', 16)),
	'Oriya': range(int('0B00', 16), int('0B7F', 16)),
	'Tamil': range(int('0B80', 16), int('0BFF', 16)),
	'Telugu': range(int('0C00', 16), int('0C7F', 16)),
	'Kannada': range(int('0C80', 16), int('0CFF', 16)),
	'Malayalam': range(int('0D00', 16), int('0D7F', 16)),
	'Sinhala': range(int('0D80', 16), int('0DFF', 16)),
	'Thai': range(int('0E00', 16), int('0E7F', 16)),
	'Lao': range(int('0E80', 16), int('0EFF', 16)),
	'Tibetan': range(int('0F00', 16), int('0FFF', 16)),
	'Myanmar': range(int('1000', 16), int('109F', 16)),
	'Georgian': range(int('10A0', 16), int('10FF', 16)),
	'HangulJamo': range(int('1100', 16), int('11FF', 16)),
	'Ethiopic': range(int('1200', 16), int('137F', 16)),
	'EthiopicSupplement': range(int('1380', 16), int('139F', 16)),
	'Cherokee': range(int('13A0', 16), int('13FF', 16)),
	'UnifiedCanadianAboriginalSyllabics': range(int('1400', 16), int('167F', 16)),
	'Ogham': range(int('1680', 16), int('169F', 16)),
	'Runic': range(int('16A0', 16), int('16FF', 16)),
	'Tagalog': range(int('1700', 16), int('171F', 16)),
	'Hanunoo': range(int('1720', 16), int('173F', 16)),
	'Buhid': range(int('1740', 16), int('175F', 16)),
	'Tagbanwa': range(int('1760', 16), int('177F', 16)),
	'Khmer': range(int('1780', 16), int('17FF', 16)),
	'Mongolian': range(int('1800', 16), int('18AF', 16)),
	'UnifiedCanadianAboriginalSyllabicsExtended': range(int('18B0', 16), int('18FF', 16)),
	'Limbu': range(int('1900', 16), int('194F', 16)),
	'TaiLe': range(int('1950', 16), int('197F', 16)),
	'NewTaiLue': range(int('1980', 16), int('19DF', 16)),
	'KhmerSymbols': range(int('19E0', 16), int('19FF', 16)),
	'Buginese': range(int('1A00', 16), int('1A1F', 16)),
	'TaiTham': range(int('1A20', 16), int('1AAF', 16)),
	'CombiningDiacriticalMarksExtended': range(int('1AB0', 16), int('1AFF', 16)),
	'Balinese': range(int('1B00', 16), int('1B7F', 16)),
	'Sundanese': range(int('1B80', 16), int('1BBF', 16)),
	'Batak': range(int('1BC0', 16), int('1BFF', 16)),
	'Lepcha': range(int('1C00', 16), int('1C4F', 16)),
	'OlChiki': range(int('1C50', 16), int('1C7F', 16)),
	'CyrillicExtended-C': range(int('1C80', 16), int('1C8F', 16)),
	'GeorgianExtended': range(int('1C90', 16), int('1CBF', 16)),
	'SundaneseSupplement': range(int('1CC0', 16), int('1CCF', 16)),
	'VedicExtensions': range(int('1CD0', 16), int('1CFF', 16)),
	'PhoneticExtensions': range(int('1D00', 16), int('1D7F', 16)),
	'PhoneticExtensionsSupplement': range(int('1D80', 16), int('1DBF', 16)),
	'CombiningDiacriticalMarksSupplement': range(int('1DC0', 16), int('1DFF', 16)),
	'LatinExtendedAdditional': range(int('1E00', 16), int('1EFF', 16)),
	'GreekExtended': range(int('1F00', 16), int('1FFF', 16)),
	'GeneralPunctuation': range(int('2000', 16), int('206F', 16)),
	'SuperscriptsandSubscripts': range(int('2070', 16), int('209F', 16)),
	'CurrencySymbols': range(int('20A0', 16), int('20CF', 16)),
	'CombiningDiacriticalMarksforSymbols': range(int('20D0', 16), int('20FF', 16)),
	'LetterlikeSymbols': range(int('2100', 16), int('214F', 16)),
	'NumberForms': range(int('2150', 16), int('218F', 16)),
	'Arrows': range(int('2190', 16), int('21FF', 16)),
	'MathematicalOperators': range(int('2200', 16), int('22FF', 16)),
	'MiscellaneousTechnical': range(int('2300', 16), int('23FF', 16)),
	'ControlPictures': range(int('2400', 16), int('243F', 16)),
	'OpticalCharacterRecognition': range(int('2440', 16), int('245F', 16)),
	'EnclosedAlphanumerics': range(int('2460', 16), int('24FF', 16)),
	'BoxDrawing': range(int('2500', 16), int('257F', 16)),
	'BlockElements': range(int('2580', 16), int('259F', 16)),
	'GeometricShapes': range(int('25A0', 16), int('25FF', 16)),
	'MiscellaneousSymbols': range(int('2600', 16), int('26FF', 16)),
	'Dingbats': range(int('2700', 16), int('27BF', 16)),
	'MiscellaneousMathematicalSymbols-A': range(int('27C0', 16), int('27EF', 16)),
	'SupplementalArrows-A': range(int('27F0', 16), int('27FF', 16)),
	'BraillePatterns': range(int('2800', 16), int('28FF', 16)),
	'SupplementalArrows-B': range(int('2900', 16), int('297F', 16)),
	'MiscellaneousMathematicalSymbols-B': range(int('2980', 16), int('29FF', 16)),
	'SupplementalMathematicalOperators': range(int('2A00', 16), int('2AFF', 16)),
	'MiscellaneousSymbolsandArrows': range(int('2B00', 16), int('2BFF', 16)),
	'Glagolitic': range(int('2C00', 16), int('2C5F', 16)),
	'LatinExtended-C': range(int('2C60', 16), int('2C7F', 16)),
	'Coptic': range(int('2C80', 16), int('2CFF', 16)),
	'GeorgianSupplement': range(int('2D00', 16), int('2D2F', 16)),
	'Tifinagh': range(int('2D30', 16), int('2D7F', 16)),
	'EthiopicExtended': range(int('2D80', 16), int('2DDF', 16)),
	'CyrillicExtended-A': range(int('2DE0', 16), int('2DFF', 16)),
	'SupplementalPunctuation': range(int('2E00', 16), int('2E7F', 16)),
	'CJKRadicalsSupplement': range(int('2E80', 16), int('2EFF', 16)),
	'KangxiRadicals': range(int('2F00', 16), int('2FDF', 16)),
	'IdeographicDescriptionCharacters': range(int('2FF0', 16), int('2FFF', 16)),
	'CJKSymbolsandPunctuation': range(int('3000', 16), int('303F', 16)),
	'Hiragana': range(int('3040', 16), int('309F', 16)),
	'Katakana': range(int('30A0', 16), int('30FF', 16)),
	'Bopomofo': range(int('3100', 16), int('312F', 16)),
	'HangulCompatibilityJamo': range(int('3130', 16), int('318F', 16)),
	'Kanbun': range(int('3190', 16), int('319F', 16)),
	'BopomofoExtended': range(int('31A0', 16), int('31BF', 16)),
	'CJKStrokes': range(int('31C0', 16), int('31EF', 16)),
	'KatakanaPhoneticExtensions': range(int('31F0', 16), int('31FF', 16)),
	'EnclosedCJKLettersandMonths': range(int('3200', 16), int('32FF', 16)),
	'CJKCompatibility': range(int('3300', 16), int('33FF', 16)),
	'CJKUnifiedIdeographsExtensionA': range(int('3400', 16), int('4DBF', 16)),
	'YijingHexagramSymbols': range(int('4DC0', 16), int('4DFF', 16)),
	'CJKUnifiedIdeographs': range(int('4E00', 16), int('9FFF', 16)),
	'YiSyllables': range(int('A000', 16), int('A48F', 16)),
	'YiRadicals': range(int('A490', 16), int('A4CF', 16)),
	'Lisu': range(int('A4D0', 16), int('A4FF', 16)),
	'Vai': range(int('A500', 16), int('A63F', 16)),
	'CyrillicExtended-B': range(int('A640', 16), int('A69F', 16)),
	'Bamum': range(int('A6A0', 16), int('A6FF', 16)),
	'ModifierToneLetters': range(int('A700', 16), int('A71F', 16)),
	'LatinExtended-D': range(int('A720', 16), int('A7FF', 16)),
	'SylotiNagri': range(int('A800', 16), int('A82F', 16)),
	'CommonIndicNumberForms': range(int('A830', 16), int('A83F', 16)),
	'Phags-pa': range(int('A840', 16), int('A87F', 16)),
	'Saurashtra': range(int('A880', 16), int('A8DF', 16)),
	'DevanagariExtended': range(int('A8E0', 16), int('A8FF', 16)),
	'KayahLi': range(int('A900', 16), int('A92F', 16)),
	'Rejang': range(int('A930', 16), int('A95F', 16)),
	'HangulJamoExtended-A': range(int('A960', 16), int('A97F', 16)),
	'Javanese': range(int('A980', 16), int('A9DF', 16)),
	'MyanmarExtended-B': range(int('A9E0', 16), int('A9FF', 16)),
	'Cham': range(int('AA00', 16), int('AA5F', 16)),
	'MyanmarExtended-A': range(int('AA60', 16), int('AA7F', 16)),
	'TaiViet': range(int('AA80', 16), int('AADF', 16)),
	'MeeteiMayekExtensions': range(int('AAE0', 16), int('AAFF', 16)),
	'EthiopicExtended-A': range(int('AB00', 16), int('AB2F', 16)),
	'LatinExtended-E': range(int('AB30', 16), int('AB6F', 16)),
	'CherokeeSupplement': range(int('AB70', 16), int('ABBF', 16)),
	'MeeteiMayek': range(int('ABC0', 16), int('ABFF', 16)),
	'HangulSyllables': range(int('AC00', 16), int('D7AF', 16)),
	'HangulJamoExtended-B': range(int('D7B0', 16), int('D7FF', 16)),
	'HighSurrogates': range(int('D800', 16), int('DB7F', 16)),
	'HighPrivateUseSurrogates': range(int('DB80', 16), int('DBFF', 16)),
	'LowSurrogates': range(int('DC00', 16), int('DFFF', 16)),
	'PrivateUseArea': range(int('E000', 16), int('F8FF', 16)),
	'CJKCompatibilityIdeographs': range(int('F900', 16), int('FAFF', 16)),
	'AlphabeticPresentationForms': range(int('FB00', 16), int('FB4F', 16)),
	'ArabicPresentationForms-A': range(int('FB50', 16), int('FDFF', 16)),
	'VariationSelectors': range(int('FE00', 16), int('FE0F', 16)),
	'VerticalForms': range(int('FE10', 16), int('FE1F', 16)),
	'CombiningHalfMarks': range(int('FE20', 16), int('FE2F', 16)),
	'CJKCompatibilityForms': range(int('FE30', 16), int('FE4F', 16)),
	'SmallFormVariants': range(int('FE50', 16), int('FE6F', 16)),
	'ArabicPresentationForms-B': range(int('FE70', 16), int('FEFF', 16)),
	'HalfwidthandFullwidthForms': range(int('FF00', 16), int('FFEF', 16)),
	'Specials': range(int('FFF0', 16), int('FFFF', 16)),
	'LinearBSyllabary': range(int('10000', 16), int('1007F', 16)),
	'LinearBIdeograms': range(int('10080', 16), int('100FF', 16)),
	'AegeanNumbers': range(int('10100', 16), int('1013F', 16)),
	'AncientGreekNumbers': range(int('10140', 16), int('1018F', 16)),
	'AncientSymbols': range(int('10190', 16), int('101CF', 16)),
	'PhaistosDisc': range(int('101D0', 16), int('101FF', 16)),
	'Lycian': range(int('10280', 16), int('1029F', 16)),
	'Carian': range(int('102A0', 16), int('102DF', 16)),
	'CopticEpactNumbers': range(int('102E0', 16), int('102FF', 16)),
	'OldItalic': range(int('10300', 16), int('1032F', 16)),
	'Gothic': range(int('10330', 16), int('1034F', 16)),
	'OldPermic': range(int('10350', 16), int('1037F', 16)),
	'Ugaritic': range(int('10380', 16), int('1039F', 16)),
	'OldPersian': range(int('103A0', 16), int('103DF', 16)),
	'Deseret': range(int('10400', 16), int('1044F', 16)),
	'Shavian': range(int('10450', 16), int('1047F', 16)),
	'Osmanya': range(int('10480', 16), int('104AF', 16)),
	'Osage': range(int('104B0', 16), int('104FF', 16)),
	'Elbasan': range(int('10500', 16), int('1052F', 16)),
	'CaucasianAlbanian': range(int('10530', 16), int('1056F', 16)),
	'LinearA': range(int('10600', 16), int('1077F', 16)),
	'CypriotSyllabary': range(int('10800', 16), int('1083F', 16)),
	'ImperialAramaic': range(int('10840', 16), int('1085F', 16)),
	'Palmyrene': range(int('10860', 16), int('1087F', 16)),
	'Nabataean': range(int('10880', 16), int('108AF', 16)),
	'Hatran': range(int('108E0', 16), int('108FF', 16)),
	'Phoenician': range(int('10900', 16), int('1091F', 16)),
	'Lydian': range(int('10920', 16), int('1093F', 16)),
	'MeroiticHieroglyphs': range(int('10980', 16), int('1099F', 16)),
	'MeroiticCursive': range(int('109A0', 16), int('109FF', 16)),
	'Kharoshthi': range(int('10A00', 16), int('10A5F', 16)),
	'OldSouthArabian': range(int('10A60', 16), int('10A7F', 16)),
	'OldNorthArabian': range(int('10A80', 16), int('10A9F', 16)),
	'Manichaean': range(int('10AC0', 16), int('10AFF', 16)),
	'Avestan': range(int('10B00', 16), int('10B3F', 16)),
	'InscriptionalParthian': range(int('10B40', 16), int('10B5F', 16)),
	'InscriptionalPahlavi': range(int('10B60', 16), int('10B7F', 16)),
	'PsalterPahlavi': range(int('10B80', 16), int('10BAF', 16)),
	'OldTurkic': range(int('10C00', 16), int('10C4F', 16)),
	'OldHungarian': range(int('10C80', 16), int('10CFF', 16)),
	'HanifiRohingya': range(int('10D00', 16), int('10D3F', 16)),
	'RumiNumeralSymbols': range(int('10E60', 16), int('10E7F', 16)),
	'Yezidi': range(int('10E80', 16), int('10EBF', 16)),
	'OldSogdian': range(int('10F00', 16), int('10F2F', 16)),
	'Sogdian': range(int('10F30', 16), int('10F6F', 16)),
	'Chorasmian': range(int('10FB0', 16), int('10FDF', 16)),
	'Elymaic': range(int('10FE0', 16), int('10FFF', 16)),
	'Brahmi': range(int('11000', 16), int('1107F', 16)),
	'Kaithi': range(int('11080', 16), int('110CF', 16)),
	'SoraSompeng': range(int('110D0', 16), int('110FF', 16)),
	'Chakma': range(int('11100', 16), int('1114F', 16)),
	'Mahajani': range(int('11150', 16), int('1117F', 16)),
	'Sharada': range(int('11180', 16), int('111DF', 16)),
	'SinhalaArchaicNumbers': range(int('111E0', 16), int('111FF', 16)),
	'Khojki': range(int('11200', 16), int('1124F', 16)),
	'Multani': range(int('11280', 16), int('112AF', 16)),
	'Khudawadi': range(int('112B0', 16), int('112FF', 16)),
	'Grantha': range(int('11300', 16), int('1137F', 16)),
	'Newa': range(int('11400', 16), int('1147F', 16)),
	'Tirhuta': range(int('11480', 16), int('114DF', 16)),
	'Siddham': range(int('11580', 16), int('115FF', 16)),
	'Modi': range(int('11600', 16), int('1165F', 16)),
	'MongolianSupplement': range(int('11660', 16), int('1167F', 16)),
	'Takri': range(int('11680', 16), int('116CF', 16)),
	'Ahom': range(int('11700', 16), int('1173F', 16)),
	'Dogra': range(int('11800', 16), int('1184F', 16)),
	'WarangCiti': range(int('118A0', 16), int('118FF', 16)),
	'DivesAkuru': range(int('11900', 16), int('1195F', 16)),
	'Nandinagari': range(int('119A0', 16), int('119FF', 16)),
	'ZanabazarSquare': range(int('11A00', 16), int('11A4F', 16)),
	'Soyombo': range(int('11A50', 16), int('11AAF', 16)),
	'PauCinHau': range(int('11AC0', 16), int('11AFF', 16)),
	'Bhaiksuki': range(int('11C00', 16), int('11C6F', 16)),
	'Marchen': range(int('11C70', 16), int('11CBF', 16)),
	'MasaramGondi': range(int('11D00', 16), int('11D5F', 16)),
	'GunjalaGondi': range(int('11D60', 16), int('11DAF', 16)),
	'Makasar': range(int('11EE0', 16), int('11EFF', 16)),
	'LisuSupplement': range(int('11FB0', 16), int('11FBF', 16)),
	'TamilSupplement': range(int('11FC0', 16), int('11FFF', 16)),
	'Cuneiform': range(int('12000', 16), int('123FF', 16)),
	'CuneiformNumbersandPunctuation': range(int('12400', 16), int('1247F', 16)),
	'EarlyDynasticCuneiform': range(int('12480', 16), int('1254F', 16)),
	'EgyptianHieroglyphs': range(int('13000', 16), int('1342F', 16)),
	'EgyptianHieroglyphFormatControls': range(int('13430', 16), int('1343F', 16)),
	'AnatolianHieroglyphs': range(int('14400', 16), int('1467F', 16)),
	'BamumSupplement': range(int('16800', 16), int('16A3F', 16)),
	'Mro': range(int('16A40', 16), int('16A6F', 16)),
	'BassaVah': range(int('16AD0', 16), int('16AFF', 16)),
	'PahawhHmong': range(int('16B00', 16), int('16B8F', 16)),
	'Medefaidrin': range(int('16E40', 16), int('16E9F', 16)),
	'Miao': range(int('16F00', 16), int('16F9F', 16)),
	'IdeographicSymbolsandPunctuation': range(int('16FE0', 16), int('16FFF', 16)),
	'Tangut': range(int('17000', 16), int('187FF', 16)),
	'TangutComponents': range(int('18800', 16), int('18AFF', 16)),
	'KhitanSmallScript': range(int('18B00', 16), int('18CFF', 16)),
	'TangutSupplement': range(int('18D00', 16), int('18D8F', 16)),
	'KanaSupplement': range(int('1B000', 16), int('1B0FF', 16)),
	'KanaExtended-A': range(int('1B100', 16), int('1B12F', 16)),
	'SmallKanaExtension': range(int('1B130', 16), int('1B16F', 16)),
	'Nushu': range(int('1B170', 16), int('1B2FF', 16)),
	'Duployan': range(int('1BC00', 16), int('1BC9F', 16)),
	'ShorthandFormatControls': range(int('1BCA0', 16), int('1BCAF', 16)),
	'ByzantineMusicalSymbols': range(int('1D000', 16), int('1D0FF', 16)),
	'MusicalSymbols': range(int('1D100', 16), int('1D1FF', 16)),
	'AncientGreekMusicalNotation': range(int('1D200', 16), int('1D24F', 16)),
	'MayanNumerals': range(int('1D2E0', 16), int('1D2FF', 16)),
	'TaiXuanJingSymbols': range(int('1D300', 16), int('1D35F', 16)),
	'CountingRodNumerals': range(int('1D360', 16), int('1D37F', 16)),
	'MathematicalAlphanumericSymbols': range(int('1D400', 16), int('1D7FF', 16)),
	'SuttonSignWriting': range(int('1D800', 16), int('1DAAF', 16)),
	'GlagoliticSupplement': range(int('1E000', 16), int('1E02F', 16)),
	'NyiakengPuachueHmong': range(int('1E100', 16), int('1E14F', 16)),
	'Wancho': range(int('1E2C0', 16), int('1E2FF', 16)),
	'MendeKikakui': range(int('1E800', 16), int('1E8DF', 16)),
	'Adlam': range(int('1E900', 16), int('1E95F', 16)),
	'IndicSiyaqNumbers': range(int('1EC70', 16), int('1ECBF', 16)),
	'OttomanSiyaqNumbers': range(int('1ED00', 16), int('1ED4F', 16)),
	'ArabicMathematicalAlphabeticSymbols': range(int('1EE00', 16), int('1EEFF', 16)),
	'MahjongTiles': range(int('1F000', 16), int('1F02F', 16)),
	'DominoTiles': range(int('1F030', 16), int('1F09F', 16)),
	'PlayingCards': range(int('1F0A0', 16), int('1F0FF', 16)),
	'EnclosedAlphanumericSupplement': range(int('1F100', 16), int('1F1FF', 16)),
	'EnclosedIdeographicSupplement': range(int('1F200', 16), int('1F2FF', 16)),
	'MiscellaneousSymbolsandPictographs': range(int('1F300', 16), int('1F5FF', 16)),
	'Emoticons': range(int('1F600', 16), int('1F64F', 16)),
	'OrnamentalDingbats': range(int('1F650', 16), int('1F67F', 16)),
	'TransportandMapSymbols': range(int('1F680', 16), int('1F6FF', 16)),
	'AlchemicalSymbols': range(int('1F700', 16), int('1F77F', 16)),
	'GeometricShapesExtended': range(int('1F780', 16), int('1F7FF', 16)),
	'SupplementalArrows-C': range(int('1F800', 16), int('1F8FF', 16)),
	'SupplementalSymbolsandPictographs': range(int('1F900', 16), int('1F9FF', 16)),
	'ChessSymbols': range(int('1FA00', 16), int('1FA6F', 16)),
	'SymbolsandPictographsExtended-A': range(int('1FA70', 16), int('1FAFF', 16)),
	'SymbolsforLegacyComputing': range(int('1FB00', 16), int('1FBFF', 16)),
	'CJKUnifiedIdeographsExtensionB': range(int('20000', 16), int('2A6DF', 16)),
	'CJKUnifiedIdeographsExtensionC': range(int('2A700', 16), int('2B73F', 16)),
	'CJKUnifiedIdeographsExtensionD': range(int('2B740', 16), int('2B81F', 16)),
	'CJKUnifiedIdeographsExtensionE': range(int('2B820', 16), int('2CEAF', 16)),
	'CJKUnifiedIdeographsExtensionF': range(int('2CEB0', 16), int('2EBEF', 16)),
	'CJKCompatibilityIdeographsSupplement': range(int('2F800', 16), int('2FA1F', 16)),
	'CJKUnifiedIdeographsExtensionG': range(int('30000', 16), int('3134F', 16)),
	'Tags': range(int('E0000', 16), int('E007F', 16)),
	'VariationSelectorsSupplement': range(int('E0100', 16), int('E01EF', 16)),
	'SupplementaryPrivateUseArea-A': range(int('F0000', 16), int('FFFFF', 16)),
	'SupplementaryPrivateUseArea-B': range(int('100000', 16), int('10FFFF', 16)),
}
# Get just blocks for RTL text
RTLblocks = {key: unicodeBlocks[key] for key in (
    "Hebrew", "Thaana", "Syriac", "SyriacSupplement", "Mandaic", "Samaritan", "MendeKikakui", "NKo", "Adlam", "HanifiRohingya",
)}
# List of unicode values which are RTL
RTLvals = []
for item in [list(RTLblocks[key]) for key in RTLblocks]:
    RTLvals.extend(item)
# Get just blocks for Arabic text
arabicBlocks = {key: unicodeBlocks[key] for key in (
    "Arabic", "ArabicSupplement", "ArabicExtended-A", "ArabicPresentationForms-A", "ArabicPresentationForms-B", "ArabicMathematicalAlphabeticSymbols", "RumiNumeralSymbols", "IndicSiyaqNumbers", "OttomanSiyaqNumbers",
)}
# List of unicode values which are Arabic
arabicVals = []
for item in [list(arabicBlocks[key]) for key in arabicBlocks]:
    arabicVals.extend(item)